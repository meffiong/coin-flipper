{"version":3,"sources":["CoinContainer.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["CoinContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currCoin","nFlips","nHeads","nTails","handleClick","bind","assertThisInitialized","arr","newCoin","coins","Math","floor","random","length","console","log","setState","st","side","flipCoin","react_default","a","createElement","className","src","imgUrl","onClick","Component","defaultProps","App","src_CoinContainer_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAIMA,cAQF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEZX,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IARLA,0EAad,ICxBQe,EDwBFC,GCxBED,EDwBeZ,KAAKJ,MAAMkB,OCvB5BC,KAAKC,MAAOD,KAAKE,SAAWL,EAAIM,SDwBtCC,QAAQC,IAAIP,GACZb,KAAKqB,SAAS,SAAAC,GACV,MAAM,CACFhB,OAAQgB,EAAGhB,OAAS,EACpBD,SAAUQ,EACVN,OAAQe,EAAGf,QAA2B,UAAjBM,EAAQU,KAAmB,EAAI,GACpDf,OAAQc,EAAGd,QAA2B,UAAjBK,EAAQU,KAAmB,EAAI,4CAM5DvB,KAAKwB,4CAIL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,0BACC3B,KAAKI,MAAMC,UAAYoB,EAAAC,EAAAC,cAAA,mBAAW3B,KAAKI,MAAMC,SAASkB,KAA/B,iBACvBvB,KAAKI,MAAMC,UAAYoB,EAAAC,EAAAC,cAAA,OAAKE,IAAK7B,KAAKI,MAAMC,SAASyB,SACtDL,EAAAC,EAAAC,cAAA,SAAI3B,KAAKI,MAAME,OAAf,iBAAqCN,KAAKI,MAAMG,OAAhD,cAAmEP,KAAKI,MAAMI,OAA9E,WACAiB,EAAAC,EAAAC,cAAA,UAAQI,QAAS/B,KAAKS,aAAtB,sBA5CYuB,aAAtBrC,EACKsC,aAAe,CAClBnB,MAAO,CACH,CAACS,KAAM,QAASO,OAAO,4CACvB,CAACP,KAAM,QAASO,OAAO,8CA8CpBnC,cE1CAuC,MARf,WACE,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b400e625.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {choice} from './helpers'\nimport './CoinContainer.css'\n\nclass CoinContainer extends Component {\n    static defaultProps = {\n        coins: [\n            {side: 'heads', imgUrl:'https://tinyurl.com/react-coin-heads-jpg'},\n            {side: 'tails', imgUrl:'https://tinyurl.com/react-coin-tails-jpg'}\n        ]\n    }\n\n    constructor(props){\n        super(props)\n        this.state = {\n            currCoin: null,\n            nFlips: 0,\n            nHeads: 0,\n            nTails: 0\n        }\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    \n    flipCoin(){\n        const newCoin = choice(this.props.coins)\n        console.log(newCoin)\n        this.setState(st => {\n            return{\n                nFlips: st.nFlips + 1,\n                currCoin: newCoin,\n                nHeads: st.nHeads + (newCoin.side === 'heads' ? 1 : 0 ),\n                nTails: st.nTails + (newCoin.side === 'tails' ? 1 : 0 )\n            }\n        });\n    }\n\n    handleClick(){\n        this.flipCoin()\n    }\n\n    render() {\n        return (\n            <div className=\"coinContainer\">\n                <h1>Flip a coin!</h1>\n                {this.state.currCoin && <p>It's a {this.state.currCoin.side}, Flip again!</p>}\n                {this.state.currCoin && <img src={this.state.currCoin.imgUrl} />}\n                <p>{this.state.nFlips} total flips, {this.state.nHeads} heads and {this.state.nTails} tails.</p>\n                <button onClick={this.handleClick}>Flip Coin!</button>\n            </div>\n        )\n    }\n}\n\nexport default CoinContainer;","\nfunction choice(arr){\n    let ind = Math.floor( Math.random() * arr.length );\n\n    return arr[ind]\n}\n\nexport { choice };","import React from 'react';\nimport CoinContainer from './CoinContainer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}